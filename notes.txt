THESE ARE WORKING NOTES.



Originally created and tested in pycharm.

udp-rx.py moved into a sub dir udp-rx so that it could have its own associated Dockerfile.

======================================
Using udp-send.py and some docker info
======================================

To run script in bash (without docker), activate python virtual environment using:
(this might be optional --- might not need virtual env to run)
$ source ./venv/bin/activate
$ python udp-send.py

To create docker image:
$ docker image build -t udp-send .

To list images:
$ docker images

To start a container with Python text output on terminal (using docker publish port):
$ docker container run --publish 5005:5005 --name udpsend -e destip=192.168.1.15 -e destport=5005 udp-send

To start a container with Python text output on terminal (using host network):
$ docker container run --network="host" --name udpsend -e destip=192.168.1.15 -e destport=5005 udp-send


To start a container without Python text output and detach terminal:
$ docker container run --publish 5005:5005 --detach --name udpsend -e destip=192.168.1.15 -e destport=5005 udp-send


To show all containers:
$ docker container ls -a

To stop container (by name):
$ docker stop udpsend

To restart container (by name):
$ docker start udpsend

Purging All Unused or Dangling Images, Containers, Volumes, and Networks:
$ docker system prune

To additionally remove any stopped containers and all unused images (not just dangling images), add the -a flag to the command:
$ docker system prune -a

To bash into container
$ docker exec -it udpsend bash

======================================
Using udp-rx.py and some docker info
======================================

To create docker image:
$ docker image build -t udp-rx .

To start a container with Python text output on terminal (using host network):
$ docker container run  --name udprx --network="host" -e myip=192.168.1.12 -e myport=5005 udp-rx
     * Cannot get this to work using --publish or bridge, only using host network
     * This does not work on windows

Both of these work, but use the docker bridge IP address:
$ docker container run --name udprx --publish 5005:5005 -e myip=172.17.0.2 -e myport=5005 udp-rx
$ docker container run --name udprx -e myip=172.17.0.2 -e myport=5005 udp-rx
(Send udp packets from the host machine to myip above)

Need to expose port with /udp:
$ docker run -p 0.0.0.0:5005:5005/udp --name udprx udp-rx

IP address in python file in docker container can be 0.0.0.0 or hostname
Cannot be localhost or 127.0.0.1

run with --expose does not work



To bash into container
$ docker exec -it udprx bash


use --init in run so that container exits cleanly and stops faster


$ docker run -p 5005:5005/udp --init -e myport=5005 --name udprx udp-rx

From docker hub:
$ docker run -p 5005:5005/udp --init -e myport=5005 --rm --name udprx billnewhall/udp-rx:0.0
  - Option --rm removes the container after it stops
  - The :0.0 is the tag

Built image on Rpi 4.  It works.
On pi, tried using udp-rx image downloaded from dockerhub (built on Ubuntu PC).  Does not work on pi (Exec format error)


Creating an image for pushing to Docker Hub:
$ docker image build -t billnewhall/udp-rx:0.0 .

Pushing to Docker Hub
$ docker push billnewhall/udp-rx

rename
Multi OS/arch, use buildx:
	https://stackoverflow.com/questions/44346322/how-to-run-docker-with-experimental-functions-on-ubuntu-16-04

  configure docker daemon in config file:
  wnewhall@TwinkieLinux:~/.docker$ nano config.json
  wnewhall@TwinkieLinux:~/.docker$ sudo service docker restart
  wnewhall@TwinkieLinux:~/.docker$ docker version
	above didn't work

See: https://github.com/docker/docker-ce/blob/master/components/cli/experimental/README.md

ENABLING EXPERIMENTAL DOCKER ENGINE

Try creating file
wnewhall@TwinkieLinux:/etc/docker$ sudo touch daemon.json
wnewhall@TwinkieLinux:/etc/docker$ sudo nano daemon.json

file contents:
{
    "experimental": true
}

after editing, wnewhall@TwinkieLinux:/etc/docker$ sudo service docker restart



======================================================================================
Capture this for documentation
ENABLING EXPERIMENTAL DOCKER CLIENT AND BUILDING FOR ANOTHER ARCHITECTURE

To enable client experimental features:
export DOCKER_CLI_EXPERIMENTAL=enabled

Trying:
docker image build --platform linux/arm --platform linux/amd64 -t billnewhall/udp-rx .
  This doesn't work to build for two architectures

Was able to build for either but not both (above only built amd64):
  Built for arm on amd pc:
  $ docker image build --platform linux/arm -t billnewhall/udp-rx .
  $ docker push billnewhall/udp-rx

Pulled on rpi4 (prune to get rid of old image first):
  $ docker image prune -a
  $ docker run -p 5005:5005/udp --init -e myport=5005 --rm --name udprx billnewhall/udp-rx
    it pulled from my docker git repo
    This worked!  (built on my PC, runs on pi)


This did not seem to rely on enabling experimental in the engine:

wnewhall@TwinkieLinux:~/svn-wgn/PyCharm/udp-test/udp-rx$ docker version
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea838
 Built:             Wed Nov 13 07:29:52 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.5
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.12
  Git commit:       633a0ea838
  Built:            Wed Nov 13 07:28:22 2019
  OS/Arch:          linux/amd64
  Experimental:     true
 containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:rename
  Version:          0.18.0
  GitCommit:        fec3683

==================================================================================
12/30/2019 =======================================================================

Try building for ARM without docker client or server in experimental mode

$ docker version
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea838
 Built:             Wed Nov 13 07:29:52 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.5
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.12
  Git commit:       633a0ea838
  Built:            Wed Nov 13 07:28:22 2019
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683

- Doesn't work"
$ docker image build --platform linux/arm -t billnewhall/udp-rx .
"--platform" is only supported on a Docker daemon with experimental features enabled

- Now add { "experimental": true } to ~/.docker/config.json to try put client in exp mode.
	- Add to text file and reboot
	- This did not put client nor server into experimental mode:
$ docker version
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea838
 Built:             Wed Nov 13 07:29:52 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.5
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.12
  Git commit:       633a0ea838
  Built:            Wed Nov 13 07:28:22 2019
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683

	- Try building for arm on PC
	- Did not work:
		$ docker image build --platform linux/arm -t billnewhall/udp-rx .
			"--platform" is only supported on a Docker daemon with experimental features enabled

- Remove { experimental ...} from config.json.  Put daemon.json with {"experimental": true} in /etc/docker
	- Reboot
	- This put the docker engine server in experimental mode (not the client):

$ docker version
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea838
 Built:             Wed Nov 13 07:29:52 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.5
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.12
  Git commit:       633a0ea838
  Built:            Wed Nov 13 07:28:22 2019
  OS/Arch:          linux/amd64
  Experimental:     true
 containerd:
  Version:          1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683


	- Try building for arm on PC
		$ docker image build --platform linux/arm -t billnewhall/udp-rx .
	- This worked

- Tag with descriptive name and push to my docker hub
	- $ docker image build --platform linux/arm -t billnewhall/udp-rx:linux-arm-0.1 .
	- $ docker push billnewhall/udp-rx:linux-arm-0.1

- Build on PC for PC, and push to docker hub
	- $ docker image build -t billnewhall/udp-rx:linux-amd64-0.1 .
	- $ docker push billnewhall/udp-rx:linux-amd64-0.1

- Conclusion: To build images for other platforms (e.g., build an image for ARM while using a PC), create (or add to, but the file didn't exist on my linux PC) the daemon.json file with {"experimental": true} and put in /etc/docker (and reboot).  Then use --platform linux/arm (or whatever platform):
	$ docker image build --platform linux/arm -t billnewhall/udp-rx .

- Testing on PI4
	- Start container
		$ docker run -p 5005:5005/udp --init -e myport=5005 --rm --name udprx1 billnewhall/udp-rx:linux-arm-0.1
		- This downloads the image from my docker hub acccount
	- Stop container on PI4
		$ docker container stop udprx1

- Testing on Linux PC
	- Start container
		docker run -p 5005:5005/udp --init -e myport=5005 --rm --name udprx1 billnewhall/udp-rx:linux-amd64-0.1
		- This downloads the image from my docker hub acccount
	- Stop container	
		$ docker stop udprx1 (this works without the container sub command)


- Testing on Windows 10 laptop
	- Start powershell
	- Start container
		docker run -p 5005:5005/udp --init -e myport=5005 --rm --name udprx1 billnewhall/udp-rx:linux-amd64-0.1
		- This downloads the image from my docker hub acccount
		- This runs, but does not show received UDP from other PCs (expected since this did not work inside a container during prior tests).  It does receive UDP from Ubuntu (WLS) running on this same laptop nc -u localhost 5005
	- Stop container	
		$ docker stop udprx1 (this works without the container sub command)


=======================================================================

NEXT:
- Put on github
	- Build and try docker images before putting on github
- Put lessons learned / summary on wordpress
	- Putting client in experimental mode to build images for other platforms
	- Uploading to docker hub
- Use Kubernetes

Future:
- Use Swarm and compare to Kubernetes
- Try running rpi4 rm image on rpi3

